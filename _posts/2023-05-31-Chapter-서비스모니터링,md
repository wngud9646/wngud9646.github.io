---
title:  "Section3 Project"
excerpt: "DevOps 부트캠프 Section 3"

categories:
  - Blog
tags:
  - [Blog, DevOps]

toc: true
toc_sticky: true
 
date: 2023-05-31
last_modified_at: 2023-05-31
---
# 서비스 모니터링
메트릭: 메트릭은 측정 가능한 수치 또는 지표를 의미한다. <br>
소프트웨어 개발 및 운영에서 메트릭은 성능, 가용성, 사용자 동작 등과 같은 여러 측면을 측정하고 추적하기 위해 사용된다. <br>
메트릭은 시스템 또는 애플리케이션의 상태, 동작 또는 성능을 정량화하고 모니터링할 수 있는 수치로 표현된다.

일반적으로 메트릭은 모니터링 도구를 통해 수집되고, 대시보드나 경고 시스템과 같은 방법으로 시각화되거나 경고를 생성할 수 있다. <br>
메트릭을 적절하게 설정하고 추적함으로써 시스템의 상태를 이해하고 문제를 식별하고 해결하는 데 도움을 준다.


## DevOps에서의 모니터링
DevOps 운영 단계에서의 모니터링의 목표는 다음과 같다:

- 시스템 안정성 유지: 모니터링은 시스템의 안정성을 유지하기 위해 중요한 역할을 한다. <br>
이상 상태, 성능 저하, 장애 등을 신속하게 감지하여 조치를 취함으로써 시스템의 안정성을 유지한다.

- 문제 식별과 대응: 모니터링은 시스템에서 발생하는 문제를 식별하고 대응하는 데 도움을 준다. <br>
예를 들어, 에러 로그, 경고 메시지, 지연 시간 등을 모니터링하여 문제를 파악하고 신속하게 대응한다.

- 서비스 수준 관리: 모니터링은 서비스 수준 관리를 위해 필요한 정보를 제공한다. <br>
서비스 수준 목표를 기준으로 가용성, 응답 시간, 처리량 등을 모니터링하여 SLO를 충족시키고 SLA를 준수하는지 확인한다.

- 확장성과 성능 향상: 모니터링은 시스템의 부하와 성능을 추적하고 분석하여 확장성과 성능 향상을 위한 결정을 돕는다. <br>
시스템 리소스 사용량, 트래픽 패턴 등을 모니터링하여 필요에 따라 리소스를 확장하고 성능 향상을 위한 조치를 취한다.

- 예방적인 유지보수: 모니터링은 잠재적인 문제를 예방하고 예측할 수 있는 기회를 제공한다. <br>
성능 추세 분석, 용량 계획 등을 통해 예방적인 유지보수를 수행하여 시스템의 안정성과 신뢰성을 높인다.

- 사용자 경험 향상: 모니터링은 사용자 경험을 향상시키기 위해 필요한 정보를 제공한다. <br>응답 시간, 오류 발생률, 서비스 가용성 등을 모니터링하여 사용자가 원활한 경험을 할 수 있도록 지원한다.

따라서, DevOps 운영 단계에서의 모니터링은 시스템 안정성과 성능을 유지하고 문제를 식별하여 대응하며, 서비스 수준을 관리하고 확장성과 성능을 개선하는 데 초점을 둔다.


### 검증된 학습(Validated learning)
모니터링의 주요 목표 중에 "사용량을 추적하여, 배포에 앞서 세운 가설을 검증하고 개선" 이라는 점이 있다. <br>
애자일에서는 이를 검증된 학습을 적용한다 라고 한다.

내가 이해한 내용을 시나리오로써 작성해본다면,<br>
예를 들어, 현재 서비스는 클라우드를 이용한 단일 서버를 통해 사용하고 있으나 홍보가 성공적으로 진행되어 특정 시간대에는 감당할 수 없는 수준의 트래픽이 들어오고 있다. <br>

먼저 트래픽을 감당하기 위해 가설을 세운다 <br>
"서버를 수평확장으로 늘리면 트래픽이 감당될 것이다." <br>
해당 가설을 토대로 배포를 진행하고, 모니터링을 통해 트래픽이 성공적으로 송수신됨을 확인해 볼 수 있다.<br>
여기서 새로운 개선점을 위한 가설로 <br>
"특정 시간대에만 수평확장이 되도록 하면, 비용의 절감이 가능할 것이다" 를 설정한다. <br>
해당 가설을 토대로 배포를 진행하고, 모니터링을 한다면 기존에 비해 가설이 성공적으로 증명된다면 또 다른 개선점을 위한 가설을 설정할 것이고, 증명되지 않는다면 다른 방향의 가설을 설정하게 될 것이다.

<br><br>

## 모니터링의 구분
### 블랙박스와 화이트박스
블랙박스 모니터링: 블랙박스 모니터링은 시스템 또는 애플리케이션의 내부 동작 및 상태를 추적하지 않고, 외부에서 관찰되는 동작과 결과에만 초점을 둔 모니터링 방법이다. <br>
이는 시스템의 내부 동작을 직접적으로 파악하기 어려운 경우에 유용하며, 주로 분산 시스템, 외부 서비스, 라이브러리, 외부 API 등과의 상호 작용을 모니터링하는 데 활용된다.

화이트박스 모니터링: 화이트박스 모니터링은 시스템 또는 애플리케이션의 내부 동작 및 상태를 직접적으로 추적하고 모니터링하는 방법이다. <br>
내부 동작을 이해하고 감시함으로써 시스템의 상태를 정확하게 파악하고 문제를 식별할 수 있다. <br>
주로 개발자나 운영팀이 시스템의 성능, 가용성, 안정성 등을 모니터링하고 개선하기 위해 사용된다.


### 계층에 따른 모니터링
1. 인프라스트럭처 (Infrastructure) 계층:<br>
- 노드 (Nodes): 물리적 또는 가상의 서버 인스턴스를 나타낸다. <br>
CPU, 메모리, 디스크 사용량, 네트워크 트래픽 등과 같은 하드웨어 및 운영 체제 수준의 메트릭을 모니터링한다.
- 클러스터 컴포넌트 (Cluster Components): 클러스터를 구성하는 기반 컴포넌트인 스케줄러, 컨트롤 플레인, 네트워크 구성 요소 등을 모니터링한다. <br>
이러한 컴포넌트의 상태와 성능 지표를 확인하여 클러스터의 건강 상태를 평가한다.

2. 플랫폼 (Platform) 계층:<br>
- 파드 (Pods): 컨테이너 오케스트레이션 플랫폼인 쿠버네티스에서는 파드가 컨테이너를 포함하는 가장 작은 배포 단위이다. <br>
파드의 상태, 리소스 사용량, 네트워크 트래픽 등을 모니터링한다. <br>
이는 애플리케이션의 상태와 성능을 파악하는 데 도움을 준다.
- 서비스 (Services): 컨테이너 오케스트레이션 플랫폼에서는 서비스가 여러 파드를 논리적으로 그룹화하여 외부와의 통신을 관리한다. <br>
서비스의 가용성, 트래픽 처리량, 응답 시간 등을 모니터링하여 애플리케이션의 외부 접근성을 평가한다.
- 태스크 (Tasks): AWS Elastic Container Service (ECS)에서는 태스크가 컨테이너를 실행하는 단위이다. <br>
태스크의 상태, 리소스 사용량, 네트워크 트래픽 등을 모니터링하여 애플리케이션의 상태와 성능을 평가한다.

3. 애플리케이션 계층:
메트릭 수집은 파드나 컨테이너 내부에 포함된 애플리케이션의 특정 메트릭을 수집하고 모니터링하는 것을 의미한다. <br>
예를 들어, HTTP 요청 수, 처리 시간, 오류 발생률, 데이터베이스 쿼리 성능 등을 모니터링하여 애플리케이션의 성능과 사용자 경험을 평가한다.

4. AWS EC2 및 AWS Lambda:
EC2 인스턴스의 경우, 해당 인스턴스에 대한 메트릭을 모니터링할 수 있다. <br>예를 들어, CPU 사용량, 메모리 사용량, 네트워크 입출력 등을 모니터링하여 인스턴스의 상태를 파악한다.<br>
AWS Lambda 함수의 경우, 함수에 대한 메트릭을 모니터링할 수 있다. <br>
예를 들어, 실행 시간, 메모리 사용량, 호출 횟수 등을 모니터링하여 함수의 성능과 가용성을 평가한다.


### Proxy 서버의 메트릭
애플리케이션 서버(WAS)의 앞단에 캐시 서버 혹은 인증 서버, 로드 밸런서와 같은 Proxy 서버가 존재한다면, 이는 애플리케이션 서버와는 별도로 모니터링해야 한다. <br>
애플리케이션 서버가 각 노드의 컴퓨팅 자원을 모니터링하는 데에 중점을 두었다면, Proxy 서버, 그중에서도 HTTP 라우팅을 다루고 있는 서버는 요청 그 자체와 연관된 메트릭을 위주로 모니터링 해야한다.

HTTP 요청/응답 관련 모니터링 대상은 쿠버네티스의 경우 인그레스, AWS 생태계에서는 Application Load Balancer를 중점으로 보아야한다.

<br><br>

## 사이트 신뢰성 엔지니어링(SRE) 관련 메트릭
사이트 신뢰성 엔지니어링 (Site Reliability Engineering, SRE)은 시스템의 신뢰성과 안정성을 보장하기 위한 방법론이다. <br>
SRE를 지원하기 위해 다양한 메트릭을 모니터링할 수 있다. <br>
CPU 및 메모리, 사용량 등을 파악하는 것 외에도 네트워크 요청에 따른 응답 상태, 요청의 횟수나 시간 등도 중요한 지표가 될 수 있다. <br>
이를 통해 어떤 서비스(웹사이트)가 온전히 사용자에게 전달될 수 있도록 가용성을 극대화하는 기술/문화이다.

일반적인 주요 측정항목에 대해 구글의 SRE 조직에서 정의한 “네 가지 황금 시그널(The Four Golden Signals)"이라는 SRE 모니터링의 주요 측정 항목이 있다.

1. Latency (지연 시간): 시스템의 응답 시간을 측정한다. <br>
사용자가 요청을 보낸 후 응답을 받을 때까지 걸리는 시간을 의미한다. <br>
낮은 지연 시간은 사용자 경험과 서비스 성능을 향상시키는 중요한 메트릭이다.

2. Traffic (트래픽): 시스템에 들어오는 트래픽의 양을 측정한다. <br>
초당 요청 수, 분당 요청 수, 데이터 전송량 등을 모니터링하여 서비스의 부하를 파악하고 용량을 조정할 수 있다.

3. Errors (오류): 시스템에서 발생하는 오류의 비율을 측정한다. <br>
예상치 못한 오류, 예외 상황, 실패한 요청 등을 모니터링하여 시스템의 안정성과 오류 처리 능력을 평가할 수 있다.

4. Saturation (과부하): 시스템 리소스의 사용률을 측정한다. <br>
CPU, 메모리, 디스크, 네트워크 등의 리소스 사용량을 모니터링하여 시스템의 성능 한계를 파악하고 병목 현상을 예방할 수 있다.

네 가지 황금 시그널은 서비스의 성능, 가용성, 확장성 등을 평가하는 데 도움을 준다. <br>
이러한 메트릭을 모니터링하고 임계값을 설정하여 시스템의 건강 상태를 파악하고 필요한 조치를 취할 수 있다.


### 주요 모니터링 패턴
USE 패턴은 모든 리소스의 사용률(Utilization), 포화도(Saturation), 오류(Errors)를 모니터링하는 패턴으로, 시스템의 성능과 효율성을 평가하기 위해 사용된다. <br>
USE 패턴에 따라 다음과 같은 메트릭을 모니터링할 수 있다:

사용률(Utilization): 리소스가 얼마나 많이 사용되고 있는지를 측정한다.<br> 
예를 들어, CPU 사용률, 메모리 사용률, 디스크 I/O 사용률 등을 모니터링하여 시스템의 리소스 활용 정도를 파악할 수 있다.

포화도(Saturation): 리소스가 얼마나 포화되었는지를 측정한다. <br>리소스의 포화도는 대기열의 길이, 처리 대기 시간 등을 기반으로 추정될 수 있다. <br>
예를 들어, 네트워크 대역폭의 포화도, 디스크 I/O 대기열의 길이 등을 모니터링하여 리소스 병목 현상을 감지할 수 있다.

오류(Errors): 시스템에서 발생하는 오류의 수를 측정한다. <br>
예를 들어, 에러 로그, 예외 상황, 실패한 요청 등을 모니터링하여 시스템의 안정성과 오류 처리 능력을 평가할 수 있다.


RED 패턴은 시스템의 성능과 안정성을 평가하기 위해 비율(Rate), 오류(Errors), 기간(Duration)을 주요 메트릭으로 정의하는 패턴이다. <br>
RED 패턴에 따라 다음과 같은 메트릭을 모니터링할 수 있다:

비율(Rate): 시스템에서 발생하는 이벤트의 비율을 측정한다. <br>
예를 들어, 초당 요청 수, 초당 트랜잭션 수, 초당 오류 발생 수 등을 모니터링하여 시스템의 처리량과 부하를 평가할 수 있다.

오류(Errors): 시스템에서 발생하는 오류의 수를 측정한다. <br>
예를 들어, 실패한 요청 수, 오류 응답 수 등을 모니터링하여 시스템의 안정성과 오류 처리 능력을 평가할 수 있다.

기간(Duration): 시스템 작업이 얼마나 걸리는지를 측정한다. <br>
예를 들어, 평균 응답 시간, 작업 처리 시간 등을 모니터링하여 시스템의 성능과 응답 속도를 평가할 수 있다.



## 질문
### 람다를 모니터링하려는 경우, 메트릭을 활용해 어떤 질문이 나올 수 있을까요? 레퍼런스(Lambda 키 메트릭)를 읽고, 어떤 질문을 해결할 수 있는지 알아봅시다. (힌트: 레퍼런스 문서에서 how many, how much, how long으로 검색해 보세요.)
"람다 함수의 실행 횟수는 얼마나 되나요?" (How many): 람다 함수가 실행된 총 횟수를 확인할 수 있다. 
이를 통해 함수가 얼마나 자주 호출되고 있는지, 트래픽이 어떤 패턴으로 변화하는지를 파악할 수 있다.

"람다 함수의 실행 시간은 얼마나 걸리나요?" (How long): 람다 함수의 실행 시간을 측정하여 해당 함수의 성능을 평가할 수 있다. <br>
이를 통해 함수의 응답 속도, 처리 시간 등을 확인할 수 있으며, 어떤 요청이 오래 걸리는지, 병목 현상이 있는지를 파악할 수 있다.

"람다 함수의 오류 비율은 어떻게 되나요?" (How many): 람다 함수에서 발생한 오류의 비율을 확인할 수 있다. <br>
이를 통해 함수의 안정성과 오류 처리 능력을 평가할 수 있으며, 어떤 유형의 오류가 발생하는지, 얼마나 자주 발생하는지를 파악할 수 있다.

"람다 함수가 사용하는 리소스의 사용률은 어떤가요?" (How much): 람다 함수가 사용하는 리소스의 사용률을 확인할 수 있다. <br>
예를 들어, 함수의 메모리 사용량, 디스크 I/O, 네트워크 사용량 등을 모니터링하여 리소스 사용량이 얼마나 되는지, 포화 상태에 있는지를 파악할 수 있다.

이 외에도 레퍼런스 문서에서 제공하는 메트릭을 활용하여 람다 함수의 성능, 가용성, 비용 등에 대한 다양한 질문을 해결할 수 있다. <br>


### 쿠버네티스에 어떤 파드가 Pending 상태에 머물러있다면, 어떤 계층부터 살펴보아야 할까요? 이 경우는 파드가 Running 상태인데 잘 작동하지 않는 경우랑은 어떻게 다른가요? (서비스는 연결되어 있다고 가정합니다)

쿠버네티스에서 특정 파드가 Pending 상태에 머물러 있다면 다음과 같은 계층을 살펴보아야 한다.

노드(Nodes): 파드가 실행되는 노드의 가용성과 상태를 확인해야 한다. <br>
노드가 다운되었거나, 리소스가 부족한 경우 파드가 Pending 상태에 머물 수 있다. <br>
노드의 자원 상태와 이벤트 로그를 확인하여 문제를 파악할 수 있다.

스케줄러(Scheduler): 파드가 스케줄링되지 않은 경우 스케줄러의 동작을 확인해야한다. <br>
파드의 요구사항과 노드의 가용성을 고려하여 스케줄링이 제대로 이루어지는지 확인할 수 있다. <br>
스케줄러의 로그와 설정을 확인하여 스케줄링 문제를 파악할 수 있다.

컨테이너 런타임(Container Runtime): 파드의 컨테이너 런타임(예: Docker)에서 문제가 발생할 수 있다. <br>
컨테이너 이미지의 다운로드, 실행, 네트워크 연결 등의 작업이 실패하는 경우 파드가 Pending 상태에 머물 수 있다. <br>컨테이너 런타임의 로그와 상태를 확인하여 문제를 파악할 수 있다.

파드가 Running 상태인데 잘 작동하지 않는 경우와는 다음과 같은 차이가 있다

Pending 상태: 파드가 실행되기 위해 필요한 리소스가 부족하거나 스케줄러에 의해 스케줄링되지 않아 실행되지 못하는 상태이다. <br>
이는 파드 자체가 실행되기 이전의 상태이므로 파드의 컨테이너가 실행되지 않고, 따라서 서비스에 연결되지 않는다.

Running 상태 (작동하지 않음): 파드가 실행 중이지만, 파드 내부의 컨테이너가 올바르게 작동하지 않는 경우이다. <br>
컨테이너의 애플리케이션이 시작되었지만, 애플리케이션 내부의 문제로 인해 정상적으로 작동하지 않는 상태이다. <br>
이 경우 파드는 Running 상태이므로 서비스에 연결될 수 있지만, 애플리케이션 자체의 문제로 인해 원하는 동작을 수행하지 못할 수 있다.

따라서 Pending 상태에 있는 파드의 경우는 스케줄링이나 노드 자원과 관련된 문제를 확인해야 하며, Running 상태에 있지만 작동하지 않는 파드의 경우는 파드 내부의 컨테이너와 애플리케이션에 대한 문제를 확인해야한다.